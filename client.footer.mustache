}

package {{invokerPackage}} {

	{{#imports}}import {{import}}
	{{/imports}}
	import io.circe._, io.circe.generic.auto._, io.circe.syntax._
	import {{apiPackage}}._
	import org.http4s.client.blaze._
	import org.http4s.client.Client
	import org.http4s.Uri
	import cats.effect._
	import cats._, cats.implicits._, cats.data._
	import cats.syntax.either.catsSyntaxEitherId
	import org.http4s._
	import org.http4s.client.Client
	import org.http4s.client.DisposeableResponse
	import org.http4s.headers.Authorization
	import shapeless.Coproduct
	import org.http4s.circe._
	import com.codahale.metrics._
	import org.http4s.Credentials.Token


	object {{clientName}} {
	  {{#apiInfo}}{{#apis}}
	  val {{classVarName}} = {{classname}}
	  {{/apis}}{{/apiInfo}}

	  implicit class RunnableRequestTemplate[I, O, Errors <: Coproduct](template: RequestTemplate.Aux[I, O, Errors]) {
	    def run[E[_]: Effect](client: {{clientName}}[E])(implicit enc: Encoder[I], dec: Decoder[O]): E[Either[Errors, O]] = {
	      client.run(template)
	    }
	    def run[E[_]: Effect](client: Metrics{{clientName}}[E])(implicit enc: Encoder[I], dec: Decoder[O]): E[Either[Errors, O]] = {
	      client.run(template)
	    }
	  }
	}

	class {{clientName}}[E[_]: Effect](useragent: String, client: Kleisli[E, Request[E], DisposeableResponse[E]], baseUri: Uri = Uri.uri("{{basePath}}")) {

	  def run[I, O, Errors <: Coproduct](template: RequestTemplate.Aux[I, O, Errors], auth: Option[Authorization] = None)(implicit enc: Encoder[I], dec: Decoder[O]): E[Either[Errors, O]] = {
	    val path = baseUri / template.relativePath
	    val requestWithQueryParams = template.queryParams.foldLeft(path) { case (req, (k, v)) => req.withQueryParam(k, v)}
	    val headers = Headers(template.headerParams.map{ case (k, v) => Header(k, v)}.toList :+ Header("User-Agent", useragent))
	    val fullReq = Request[E](method = template.httpMethod, uri = requestWithQueryParams, headers = headers)
	    val fullReqWithToken = auth.foldLeft(fullReq)((req, a) =>  req.putHeaders(a))
	    val fullReqWithBody = template.maybeBody.foldLeft(Effect[E].pure(fullReqWithToken))((req, b) => req.flatMap(_.withBody(b.asJson)))
	    fullReqWithBody.flatMap(client.apply).flatMap { res =>
	      res.apply({ resp =>
		      val decoder = resp.status.code match {
			case code if ((code>199) && (code<300)) => dec.map(_.asRight[Errors])
			case code => template.errorDecoder(code).map(_.asLeft[O])
	              }
		      resp.as(FlatMap[E], jsonOf(Sync[E], decoder))
	      })
	    }
	  }
	}

	class Metrics{{clientName}}[E[_]: Effect](metricPrefix: String, metrics: MetricRegistry, useragent: String, client: Kleisli[E, Request[E], DisposeableResponse[E]], baseUri: Uri = Uri.uri("{{basePath}}")) {

	  // overall metrics
	  val successful = metrics.meter(metricPrefix+".client.successful")
	  val failed     = metrics.meter(metricPrefix+".client.failed")
	  val time       = metrics.timer(metricPrefix+".client.requestTime")

	  def run[I, O, Errors <: Coproduct](template: RequestTemplate.Aux[I, O, Errors], auth: Option[Authorization] = None)(implicit enc: Encoder[I], dec: Decoder[O]): E[Either[Errors, O]] = {
	    val path = baseUri / template.relativePath
	    val requestWithQueryParams = template.queryParams.foldLeft(path) { case (req, (k, v)) => req.withQueryParam(k, v)}
	    val headers = Headers(template.headerParams.map{ case (k, v) => Header(k, v)}.toList :+ Header("User-Agent", useragent))
	    val fullReq = Request[E](method = template.httpMethod, uri = requestWithQueryParams, headers = headers)
	    val fullReqWithToken = auth.foldLeft(fullReq)((req, a) =>  req.putHeaders(a))
	    val fullReqWithBody = template.maybeBody.foldLeft(Effect[E].pure(fullReqWithToken))((req, b) => req.flatMap(_.withBody(b.asJson)))
	    val timer = time.time()
	    fullReqWithBody.flatMap(client.apply).flatMap { res =>
	      res.apply({ resp =>
		      timer.stop()
		      val decoder = resp.status.code match {
			case code if ((code>199) && (code<300)) =>
			  successful.mark()
			  dec.map(_.asRight[Errors])
			case code =>
			  failed.mark()
			  template.errorDecoder(code).map(_.asLeft[O])
		      }
		      resp.as(FlatMap[E], jsonOf(Sync[E], decoder))
	      })
	    }
	  }
	}
}
