package {{apiPackage}} {

import java.time.format.DateTimeParseException
import org.http4s.Uri
import java.time._
import io.circe._

object CirceCodecs {
  implicit val integerDecoder: Decoder[Integer] = Decoder[Int].map(i => new Integer(i.toString))
  implicit val integerEncoder: Encoder[Integer] = Encoder[Int].contramap[Integer](_.toInt)
}

object QueryStringEncoders {

  trait QueryString[T] {
    def queryString(t: T): String
  }

  implicit object QueryStringString extends QueryString[String] {
    override def queryString(s: String): String = s
  }

  implicit object QueryStringLong extends QueryString[Long] {
    override def queryString(t: Long): String = t.toString
  }

  implicit object QueryStringInteger extends QueryString[Integer] {
    override def queryString(t: Integer): String = t.toString
  }

  implicit object QueryStringFloat extends QueryString[Float] {
    override def queryString(t: Float): String = t.toString
  }

  implicit object QueryStringBoolean extends QueryString[Boolean] {
    override def queryString(t: Boolean): String = if (t) "true" else "false"
  }


  implicit class QueryStringableObject[T](t: T) {
    def queryString(implicit qsi: QueryString[T]): String = qsi.queryString(t)
  }

  implicit def listQueryString[T](implicit q: QueryString[T]): QueryString[List[T]] = new QueryString[List[T]] {
    override def queryString(xs: List[T]): String = xs.foldLeft("") { (a, n) =>
      if (a == "") n.queryString else a + "," + n.queryString
    }
  }

}
import org.http4s._
import shapeless.Coproduct
import io.circe._

trait RequestTemplate[I, O] {

  type Errors <: Coproduct
  // Opaque for now. Might need Coproduct LiftAll
  def errorDecoder(status: Int): Decoder[Errors]

  def body: I
  def maybeBody: Option[I]
  def queryParams: Map[String, String]
  def headerParams: Map[String, String]
  def scopeRequired: Option[String] = None
  def relativePath: String
  def httpMethod: Method
}

object RequestTemplate {
  type Aux[I, O, E] = RequestTemplate[I, O] {
    type Errors = E
  }
}
}

package {{invokerPackage}} {

	{{#imports}}import {{import}}
	{{/imports}}
	import io.circe._, io.circe.generic.auto._, io.circe.syntax._
	import {{apiPackage}}._
	import org.http4s.client.blaze._
	import org.http4s.client.Client
	import org.http4s.Uri
	import cats.effect._
	import cats._, cats.implicits._, cats.data._
	import cats.syntax.either.catsSyntaxEitherId
	import org.http4s._
	import org.http4s.client.Client
	import org.http4s.headers.Authorization
	import shapeless.Coproduct
	import org.http4s.circe._
	import com.codahale.metrics._
	import org.http4s.Credentials.Token


	object {{clientName}} {
	  {{#apiInfo}}{{#apis}}
	  val {{classVarName}} = {{classname}}
	  {{/apis}}{{/apiInfo}}

	  implicit class RunnableRequestTemplate[I, O, Errors <: Coproduct](template: RequestTemplate.Aux[I, O, Errors]) {
	    def run[E[_]: Effect](client: {{clientName}}[E])(implicit enc: Encoder[I], dec: Decoder[O]): E[Either[Errors, O]] = {
	      client.run(template)
	    }
	    def run[E[_]: Effect](client: Metrics{{clientName}}[E])(implicit enc: Encoder[I], dec: Decoder[O]): E[Either[Errors, O]] = {
	      client.run(template)
	    }
	  }
	}

	class {{clientName}}[E[_]: Effect](useragent: String, client: Kleisli[E, Request[E], Resource[E, Response[E]]], baseUri: Uri = Uri.uri("{{basePath}}")) {

	  def run[I, O, Errors <: Coproduct](template: RequestTemplate.Aux[I, O, Errors], auth: Option[Authorization] = None)(implicit enc: Encoder[I], dec: Decoder[O]): E[Either[Errors, O]] = {
	    val path = baseUri / template.relativePath
	    val requestWithQueryParams = template.queryParams.foldLeft(path) { case (req, (k, v)) => req.withQueryParam(k, v)}
	    val headers = Headers(template.headerParams.map{ case (k, v) => Header(k, v)}.toList :+ Header("User-Agent", useragent))
	    val fullReq = Request[E](method = template.httpMethod, uri = requestWithQueryParams, headers = headers)
	    val fullReqWithToken = auth.foldLeft(fullReq)((req, a) =>  req.putHeaders(a))
	    val fullReqWithBody = template.maybeBody.foldLeft(Effect[E].pure(fullReqWithToken))((req, b) => req.map(_.withEntity(b.asJson)))
	    fullReqWithBody.flatMap(client.apply).flatMap { res =>
	      res.use({ resp =>
		      val decoder = resp.status.code match {
			case code if ((code>199) && (code<300)) => dec.map(_.asRight[Errors])
			case code => template.errorDecoder(code).map(_.asLeft[O])
	              }
		      resp.as(FlatMap[E], jsonOf(Sync[E], decoder))
	      })
	    }
	  }
	}

	class Metrics{{clientName}}[E[_]: Effect](metricPrefix: String, metrics: MetricRegistry, useragent: String, client: Kleisli[E, Request[E], Resource[E, Response[E]]], baseUri: Uri = Uri.uri("{{basePath}}")) {

	  // overall metrics
	  val successful = metrics.meter(metricPrefix+".client.successful")
	  val failed     = metrics.meter(metricPrefix+".client.failed")
	  val time       = metrics.timer(metricPrefix+".client.requestTime")

	  def run[I, O, Errors <: Coproduct](template: RequestTemplate.Aux[I, O, Errors], auth: Option[Authorization] = None)(implicit enc: Encoder[I], dec: Decoder[O]): E[Either[Errors, O]] = {
	    val path = baseUri / template.relativePath
	    val requestWithQueryParams = template.queryParams.foldLeft(path) { case (req, (k, v)) => req.withQueryParam(k, v)}
	    val headers = Headers(template.headerParams.map{ case (k, v) => Header(k, v)}.toList :+ Header("User-Agent", useragent))
	    val fullReq = Request[E](method = template.httpMethod, uri = requestWithQueryParams, headers = headers)
	    val fullReqWithToken = auth.foldLeft(fullReq)((req, a) =>  req.putHeaders(a))
	    val fullReqWithBody = template.maybeBody.foldLeft(Effect[E].pure(fullReqWithToken))((req, b) => req.map(_.withEntity(b.asJson)))
	    val timer = time.time()
	    fullReqWithBody.flatMap(client.apply).flatMap { res =>
	      res.use({ resp =>
		      timer.stop()
		      val decoder = resp.status.code match {
			case code if ((code>199) && (code<300)) =>
			  successful.mark()
			  dec.map(_.asRight[Errors])
			case code =>
			  failed.mark()
			  template.errorDecoder(code).map(_.asLeft[O])
		      }
		      resp.as(FlatMap[E], jsonOf(Sync[E], decoder))
	      })
	    }
	  }
	}
}
