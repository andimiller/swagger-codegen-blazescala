package {{package}}

{{#imports}}import {{import}}
{{/imports}}
import io.circe._, io.circe.generic.auto._
import io.circe.java8.time._
import org.http4s.{Header, Headers, Request, Uri, Method}
import org.http4s.client.blaze._
import org.http4s.dsl._
import org.http4s.circe._
import org.http4s.client.Client
import org.http4s.headers.Authorization
import cats.effect.IO
import cats._, cats.implicits._, cats.syntax._
import QueryStringEncoders._
import CirceCodecs._
import shapeless._
import scala.language.higherKinds

{{#operations}}
object {{classname}} {

  {{#operation}}
  case class {{operationId}}({{#allParams}}{{^required}}{{paramName}}: Option[{{dataType}}] = {{#defaultValue}}Some({{#isString}}"{{/isString}}{{defaultValue}}{{#isString}}"{{/isString}}){{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{#hasMore}},{{/hasMore}}
      {{/required}}{{#required}}{{paramName}}: {{dataType}}{{#defaultValue}} = {{#isString}}"{{/isString}}{{{defaultValue}}}{{#isString}}"{{/isString}}{{/defaultValue}}{{#hasMore}},
      {{/hasMore}}{{/required}}{{/allParams}}) extends RequestTemplate[{{#bodyParam}}{{#required}}{{dataType}}{{/required}}{{^required}}Option[{{dataType}}]{{/required}}{{/bodyParam}}{{^bodyParam}}Unit{{/bodyParam}},{{returnType}}{{^returnType}}Unit{{/returnType}}] {

    val relativePath = (("{{path}}".stripPrefix("/")){{#pathParams}} replaceAll ("\\{" + "{{baseName}}" + "\\}",{{paramName}}.toString){{/pathParams}})

    type Errors = {{#responses}}{{^isDefault}}{{#dataType}}{{dataType}}{{/dataType}}{{^dataType}}Unit{{/dataType}}{{#hasMore}} :+: {{/hasMore}}{{/isDefault}}{{^hasMore}} :+: CNil{{/hasMore}}{{/responses}}

    {{#bodyParam}}
    val body = {{paramName}}
    override def maybeBody = Some(body)
    {{/bodyParam}}
    {{^bodyParam}}
    val body: Unit = ()
    override def maybeBody = None
    {{/bodyParam}}

    val httpMethod = Method.{{httpMethod}}

    val queryParams = List[Option[(String, String)]](
    {{#queryParams}}
    {{^required}}
      {{paramName}}.map{ v => ("{{baseName}}" -> v.queryString)}
    {{/required}}
    {{#required}}
      Some("{{baseName}}" -> {{paramName}}.queryString)
    {{/required}}
    {{#hasMore}},{{/hasMore}}
    {{/queryParams}}
    ).flatten.toMap[String, String]

    val headerParams = List[Option[(String, String)]](
    {{#headerParams}}
    {{#required}}
      Some("{{baseName}}" -> {{paramName}}.queryString)
    {{/required}}
    {{^required}}
      {{paramName}}.map{ v => ("{{baseName}}" -> v.queryString)}
    {{/required}}
    {{#hasMore}},{{/hasMore}}
    {{/headerParams}}
    ).flatten.toMap[String, String]

    {{#authMethods}}
    {{#scopes}}
    override def scopeRequired = Some("{{scope}}")
    {{/scopes}}
    {{/authMethods}}
    {{^authMethods}}
    override def scopeRequired = None
    {{/authMethods}}

    def errorDecoder(status: Int): Decoder[Errors] = status match {
      {{#responses}}
      {{^isDefault}}case {{code}} => Decoder[{{#dataType}}{{dataType}}{{/dataType}}{{^dataType}}Unit{{/dataType}}].map(x => Coproduct[Errors](x)){{/isDefault}}
      {{/responses}}
    }

  }

  {{/operation}}

}
{{/operations}}


